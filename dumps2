// app/api/events/[eventId]/verify/route.ts
import { NextResponse } from "next/server";
import { SelfBackendVerifier, getUserIdentifier } from "@selfxyz/core";

export async function POST(
  request: Request,
  { params }: { params: { eventId: string } }
) {
  const NGROK_URL = "https://e330-102-88-110-152.ngrok-free.app";
  const MOCK_MODE = process.env.NODE_ENV === "development";

  try {
    // 1. Parse request
    const { proof, publicSignals } = await request.json();

    if (!proof || !publicSignals) {
      return NextResponse.json(
        { isValid: false, error: "Proof and publicSignals are required" },
        { status: 400 }
      );
    }

    // 2. Get user ID
    const userId = await getUserIdentifier(publicSignals);
    console.log("Extracted userId:", userId);

    // 3. Initialize verifier
    const verifier = new SelfBackendVerifier(
      `event-access-${params.eventId}`,
      `${NGROK_URL}/api/events/${params.eventId}/verify`,
      undefined,
      MOCK_MODE
    );

    // 4. Verify proof
    const result = await verifier.verify(proof, publicSignals);
    console.log("Verification result:", result);

    // 5. Return proper response format
    if (result.isValid) {
      return NextResponse.json(
        {
          isValid: false,
          userId,
          credentialSubject: result.credentialSubject,
          details: result.isValidDetails,
        },
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": NGROK_URL,
          },
        }
      );
    }

    return NextResponse.json(
      {
        isValid: false,
        error: "Verification failed",
        details: result.isValidDetails,
      },
      { status: 400 }
    );
  } catch (error) {
    console.error("Verification error:", error);
    return NextResponse.json(
      {
        isValid: false,
        error: error instanceof Error ? error.message : "Unknown error",
      },
      {
        status: 500,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  }
}

{
  /* Right Side (Ticket Selection) */
}
<div className="p-6 md:p-8 w-full md:w-1/3">
  <div className="border p-6 rounded-lg flex flex-col items-center bg-gray-100 shadow-md">
    <p className="font-semibold text-lg text-gray-900">Reserve a Spot</p>
    <p className="text-gray-600 text-base mt-2">
      Price:{" "}
      <span className="font-semibold">
        {formattedPrice} {tokenName}
      </span>
    </p>
  </div>

  {!address ? (
    <div className="w-full bg-gray-600 text-white mt-4 py-2 rounded-lg text-lg font-semibold text-center">
      Connect Wallet to Verify
    </div>
  ) : isRegistered ? (
    <div className="w-full bg-green-600 text-white mt-4 py-2 rounded-lg text-lg font-semibold flex items-center justify-center gap-2">
      <Check className="w-5 h-5" />
      Registered
    </div>
  ) : (
    <>
      {/* Verification QR Code Section */}
      {!verificationComplete && (
        <div className="bg-white rounded-xl shadow-lg p-4 sm:p-6 w-full mt-4">
          <div className="flex justify-center mb-4">
            {selfApp ? (
              <SelfQRcodeWrapper
                selfApp={selfApp}
                onSuccess={handleSuccessfulVerification}
              />
            ) : (
              <div className="w-[256px] h-[256px] bg-gray-200 animate-pulse flex items-center justify-center">
                <p className="text-gray-500 text-sm">Loading QR Code...</p>
              </div>
            )}
          </div>

          {/* Configuration Info */}
          <div className="border-t border-gray-200 pt-3">
            <h3 className="text-xs sm:text-sm font-medium text-gray-700 mb-2">
              Verification Requirements:
            </h3>
            <ul className="text-xs sm:text-sm text-gray-600 space-y-1">
              <li className="flex items-center">
                <svg
                  className="h-3 w-3 sm:h-4 sm:w-4 text-green-500 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                <span>
                  Minimum Age:{" "}
                  <span className="font-medium ml-1">{minimumAge}+ years</span>
                </span>
              </li>
            </ul>
          </div>
        </div>
      )}

      {verificationComplete && (
        <button
          className="w-full bg-orange-600 text-white mt-4 py-2 rounded-lg text-lg font-semibold hover:bg-orange-700 transition"
          onClick={buyTicket}
          disabled={loading || registering}
        >
          {registering ? "Processing..." : "Complete Registration"}
        </button>
      )}
    </>
  )}

  {isRegistered && (
    <button
      onClick={requestRefund}
      className="w-full bg-red-500 text-white mt-4 py-2 rounded-lg text-lg font-semibold hover:bg-red-600 transition"
      disabled={loading || refunding}
    >
      {refunding ? "Processing..." : "Request Refund"}
    </button>
  )}

  {/* Toast notification */}
  {showToast && (
    <div className="fixed bottom-4 right-4 bg-gray-800 text-white py-2 px-4 rounded shadow-lg animate-fade-in text-sm">
      {toastMessage}
    </div>
  )}
</div>;
