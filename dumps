import { NextResponse } from "next/server";
import { SelfBackendVerifier, getUserIdentifier } from "@selfxyz/core";

export async function POST(
  req: Request,
  { params }: { params: { eventId: string } }
) {
  const { eventId } = params;
  const NGROK_URL = "https://9415-102-89-46-235.ngrok-free.app";
  // Set to true for testing, false for production
  const isTesting = process.env.NODE_ENV === "production";

  try {
    const { proof, publicSignals } = await req.json();

    // Initialize verifier with your app scope and endpoint
    const verifier = new SelfBackendVerifier(
      `event-access-${eventId}`, // Must match frontend scope
      `${NGROK_URL}/api/events/${eventId}/verify`,
      undefined, // user_identifier_type (optional)
      true // mockPassport flag
    );

    // Configure verification requirements
    verifier
      .setMinimumAge(18) // Require users to be 18+
      .setNationality("United States") // Only allow US citizens
      .excludeCountries("Russia", "North Korea") // Additional restrictions
      .enableNameAndDobOfacCheck(); // OFAC compliance

    // Execute verification
    const result = await verifier.verify(proof, publicSignals);

    if (result.isValid) {
      // const userId = await verifier.getUserIdentifier(publicSignals);
      const userId = await getUserIdentifier(publicSignals);

      // Additional business logic (check tickets, etc.)
      const hasTicket = await checkUserTicket(eventId, userId);

      if (!hasTicket) {
        return NextResponse.json(
          { error: "No valid ticket found" },
          { status: 403 }
        );
      }

      return NextResponse.json({
        success: true,
        eventId,
        userId,
        credential: result.credentialSubject,
      });
    }

    return NextResponse.json(
      {
        error: "Verification failed",
        details: result.isValidDetails,
      },
      { status: 400 }
    );
  } catch (error) {
    console.error(`[EVENT ${eventId}] Verification error:`, error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

// Mock function - replace with your actual ticket check
async function checkUserTicket(eventId: string, userId: string) {
  return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

<div className="p-6 md:p-8 w-full md:w-1/3">
  <div className="border p-6 rounded-lg flex flex-col items-center bg-gray-100 shadow-md">
    <p className="font-semibold text-lg text-gray-900">Reserve a Spot</p>
    <p className="text-gray-600 text-base mt-2">
      Price:{" "}
      <span className="font-semibold">
        {formattedPrice} {tokenName}
      </span>
    </p>
  </div>

  {isRegistered ? (
    <div className="w-full bg-green-600 text-white mt-4 py-2 rounded-lg text-lg font-semibold flex items-center justify-center gap-2">
      <Check className="w-5 h-5" />
      Registered
    </div>
  ) : (
    <button
      className="w-full bg-orange-600 text-white mt-4 py-2 rounded-lg text-lg font-semibold hover:bg-orange-700 transition"
      onClick={buyTicket}
      disabled={loading || registering || !address}
    >
      {!address ? "Connect Wallet" : registering ? "Processing..." : "Register"}
    </button>
  )}

  {isRegistered && (
    <button
      onClick={requestRefund}
      className="w-full bg-red-500 text-white mt-4 py-2 rounded-lg text-lg font-semibold hover:bg-red-600 transition"
      disabled={loading || refunding}
    >
      {refunding ? "Processing..." : "Request Refund"}
    </button>
  )}

  {/* Toast notification */}
  {showToast && (
    <div className="fixed bottom-4 right-4 bg-gray-800 text-white py-2 px-4 rounded shadow-lg animate-fade-in text-sm">
      {toastMessage}
    </div>
  )}

  <VerificationPage />
</div>;
